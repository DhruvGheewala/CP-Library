<snippet>
    <content><![CDATA[
struct query {
    int l, r, id, eval;
    ${1:// define variables}
    
    query() {}
    query(int _l, int _r, int _id) : l(_l), r(_r), id(_id) {calcEval();}
    inline void calcEval() {eval = giveOrder(l, r, 21, 0);}
    inline friend bool operator <(const query &lhs, const query &rhs) {return lhs.eval < rhs.eval;}

    inline int64_t giveOrder(int x, int y, int pow, int rotate)
    {
        if(pow == 0) return 0;
        int hpow = 1 << (pow - 1);
        int seg = x < hpow ? y < hpow ? 0 : 3 : y < hpow ? 1 : 2;
        seg = (seg + rotate) & 3;
        const static int rotateDelta[4] = {3, 0, 0, 1};
        int nx = x & (x ^ hpow);
        int ny = y & (y ^ hpow);
        int nrot = (rotate + rotateDelta[seg]) & 3;
        int64_t subSquareSize = 1LL << ((pow - 1) << 1);
        int64_t ans = seg * subSquareSize;
        int64_t add = giveOrder(nx, ny, pow - 1, nrot);
        ans += (seg == 1 || seg == 2) ? add : subSquareSize - add - 1;
        return ans;
    }
};

void mo(vector<query> &q)
{
    /**** Fixed ****/
    vi answer(q.size(), -1);
    int l, r, ans;
    sort(all(q));
    /**** Fixed ****/

    /**** Operations ****/
    auto add = [&](int id, int &res) {
        ${2:// need to be changed !!}
    };

    auto remove = [&](int id, int &res) {
        ${3:// need to be changed !!}
    };
    /**** Operations ****/
    
    /**** Fixed ****/
    r = -1;
    l = ans = 0;
    for(int i = 0; i < q.size(); i++) {
        while(l < q[i].l) remove(l++, ans);
        while(l > q[i].l) add(--l, ans);
        while(r < q[i].r) add(++r, ans);
        while(r > q[i].r) remove(r--, ans);
        answer[q[i].id] = ans;
    }
    /**** Fixed ****/

    /**** Printing Answer ****/    
    for(int i = 0 ; i < q.size() ; i++)
        cout << answer[i] << endl;
}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>cmoshilbert</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>
