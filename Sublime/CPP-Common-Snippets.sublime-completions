{
    "scope": "source.cpp, source.c++",
    "completions":
    [
        "break",
        "return",
        "first",
        "second",
        "true",
        "false",
        "continue",
        "length()",
        "size()",
        "decltype($1)",
        "assert($1)",
        "__builtin_popcount($1)",
        "memset($1, $2, sizeof $1)", 
        "using namespace ${1:std};\n", 
        "reverse($0)", 
        "lower_bound($0)", 
        "upper_bound($0)", 
        "accumulate($0)", 
        "in_range($0)", 
        
        // Functions
        {
            "trigger": "min_element", 
            "contents": "*min_element($0)"
        }, 

        {
            "trigger": "max_element", 
            "contents": "*max_element($0)"
        }, 

        {
            "trigger": "isPrime\tFunction", 
            "contents": "bool isPrime(int n) { for(int i = 2; i * i <= n; i++) if(n % i == 0)return false; return n >= 2;}\n"
        }, 
        
        {
            "trigger": "operator\tFunction", 
            "contents": "${1:friend }bool operator ${2:<}(const ${3:node} &lhs, const ${3:node} &rhs) $0"
        },

        {
            "trigger": "for\tFor-Loop", 
            "contents": "for(int ${1:i} = ${2:0}; ${1:i} ${4:<} ${3:n}; ${1:i}${5:++}) "
        }, 

        // Functions Calls
        {
            "trigger": "make_unique\tFunction-Call", 
            "contents": "$1.erase(unique($1.begin(), $1.end()), $1.end());\n"
        }, 

        {
            "trigger": "max\tFunction-Call",
            "contents": "$1 = max({$1, $2});"
        }, 

        {
            "trigger": "min\tFunction-Call",
            "contents": "$1 = min({$1, $2});"
        }, 

        // Other
        { 
            "trigger": "begin\tall()",
            "contents": "${1:v}.begin(), ${1:v}.end()"
        },

        { 
            "trigger": "rbegin\trall()",
            "contents": "${1:v}.rbegin(), ${1:v}.rend()"
        },
        
        { "trigger": "pb\tpush_back", "contents": "push_back($1)" },
        { "trigger": "eb\templace_back", "contents": "emplace_back($1)"},


        { "trigger": "precision", "contents": "cout << fixed << setprecision($1)" },
        { "trigger": "pi", "contents": "const double PI = acos(-1); // 3.14159265358979323846" },
        { "trigger": "gcd\t__gcd(a,b)", "contents": "__gcd($1)" },
        { "trigger": "lcm\t(a*b)/gcd(a,b)", "contents": "($1 * $2) / __gcd($1, $2)" },
        { "trigger": "flush", "contents": "cout.flush();\n" },
        
        // STL's

        // Priority_Queue
        { "trigger": "pq\tpriority_queue", "contents": "priority_queue<${1:int}>" },
        { "trigger": "pq\tpriority_queue", "contents": "priority_queue<${1:int}, vector<${1:int}>, decltype(${2:cmp}) ${3:pq}(${2:cmp})>" },
        { "trigger": "minpq\tpriority_queue", "contents": "priority_queue<${1:int}, vector<${1:int}>, greater<${1:int}>>" },

        // Special Containers
        { "trigger": "dque\tdeque", "contents": "deque<${1:int}>" },
        { "trigger": "stack\tstack", "contents": "stack<${1:int}>" },

        // RB-Tree Related DS
        { "trigger": "unordered_set", "contents": "unordered_set<${1:int}>" },
        { "trigger": "unordered_map", "contents": "unordered_map<${1:int}, ${2:int}>" },
    ]
}